# -*- coding: utf-8 -*-
"""winequalityprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzRbek4niPYArjBeTVUdzPvfnTgSsZ_4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import GridSearchCV

# Load the dataset from a CSV file provided by the user
file_path = input("Enter the path to the CSV file: ")
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Display summary statistics
print(df.describe())

# Plot histograms for each feature
df.hist(bins=15, figsize=(15, 10))
plt.show()

# Check the distribution of the target variable (quality)
sns.countplot(x='quality', data=df)
plt.title('Distribution of Wine Quality')
plt.show()

# Display the correlation matrix
correlation_matrix = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

# Split the data into features and target variable
X = df.drop(columns='quality')
y = df['quality']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Normalize the labels so that they start from 0
y_train_normalized = y_train - y_train.min()
y_test_normalized = y_test - y_train.min()

# Now, fit the XGBoost model with the normalized labels
xgb_model.fit(X_train, y_train_normalized)

# Predict the outcomes on the test set
xgb_predictions_normalized = xgb_model.predict(X_test)

# Revert the predictions to the original scale
xgb_predictions = xgb_predictions_normalized + y_train.min()

# Accuracy
xgb_accuracy = accuracy_score(y_test, xgb_predictions)
print("XGBoost Accuracy:", xgb_accuracy)

# Confusion Matrix
xgb_conf_matrix = confusion_matrix(y_test, xgb_predictions)
print("Confusion Matrix:")
print(xgb_conf_matrix)

# Classification Report
xgb_class_report = classification_report(y_test, xgb_predictions)
print("Classification Report:")
print(xgb_class_report)

# Plot the confusion matrix
sns.heatmap(xgb_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('XGBoost Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()